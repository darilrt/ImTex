layout (binding=0, rgba8) writeonly uniform image2D renderTexture;

vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }

vec2 hash(vec2 p ) {
  p = vec2( dot(p,vec2(127.1,311.7)),
			  dot(p,vec2(269.5,183.3)) );
	return -1. + 2.*fract(sin(p+20.)*53758.5453123);
}

float noise( in vec2 p ) {
    vec2 i = floor(p), f = fract(p);
	vec2 u = f*f*(3.-2.*f);
    return mix( mix( dot( hash( i + vec2(0.,0.) ), f - vec2(0.,0.) ), 
                     dot( hash( i + vec2(1.,0.) ), f - vec2(1.,0.) ), u.x),
                mix( dot( hash( i + vec2(0.,1.) ), f - vec2(0.,1.) ), 
                     dot( hash( i + vec2(1.,1.) ), f - vec2(1.,1.) ), u.x), u.y) * 0.5 + 0.5;
}

layout (local_size_x = 16, local_size_y = 16) in;
void main() {
    ivec2 position = ivec2(gl_GlobalInvocationID.xy);
    vec2 resolution = imageSize(renderTexture);
    
    float c = noise(ivec2(position));
    vec4 color = vec4(c, c, c, 1.0);
    imageStore(renderTexture, position, color);
}